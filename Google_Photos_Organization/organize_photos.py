# -*- coding: utf-8 -*-
"""
organize_photos.py: Reorganize photos and videos into a folder structure that
makes sense, as opposed to the way Google Photos downloads are received via
the Google Takeout service.

Assumes the unzipped Google Takeout folders are all in the same directory, with
no other files within the directory. These folders should retain their original
automatically-generated names, and no other changes should be made to their
structure before running organize_photos.py.

The script will first determine the list of unique folder names generated by
Google Photos that reside in the Takeout folders (i.e. Photos 2017, Trip to
Moab, etc.). It will then create empty directories in the original working
directory with those names. Finally, it will iterate through the Takeout
folders and move the files to the new named directories.


Created on Wed Apr 27 12:15:08 2022

@author: Ryan.Larson
"""

import os
import argparse

def get_folder_names(rootdir):
    all_dirs = []
    
    for rootdir, dirs, files in os.walk(rootdir):
        for d in dirs:
            basename = os.path.basename(d)
            all_dirs.append(basename)
            
    print(all_dirs)
    unique_dirs = set(all_dirs)
    unique_dirs = list(unique_dirs)
    # unique_dirs = unique_dirs.sort()
    
    # Remove directories from consideration that contain "takeout" and "Google"
    unique_dirs = [d for d in unique_dirs if "takeout" not in d.lower()]
    unique_dirs = [d for d in unique_dirs if "google" not in d.lower()]
    unique_dirs.sort()
        
    return unique_dirs


def make_necessary_dirs(rootdir, unique_dirs):
    """
    Take the list of unique_dirs and make new directories with those names in
    rootdir for combining the photos and JSON files.

    Parameters
    ----------
    rootdir : string
        DESCRIPTION.
    unique_dirs : list of strings
        DESCRIPTION.

    Returns
    -------
    None.

    """
    path = rootdir
    
    for d in unique_dirs:
        dirpath = path + "\\" + d
        isExist = os.path.exists(dirpath)
        
        if not isExist:
            # Create the directory because it does not exist
            os.makedirs(dirpath)
    


if __name__ == "__main__":
    # construct the argument parser and parse the arguments
    ap = argparse.ArgumentParser()
    # ap.add_argument("-f", "--input", type=str, required=True,
    #     help="path to csv file")
    ap.add_argument("-r", "--rootdir", type=str, required=True,
        help="path to root directory")
    # ap.add_argument("-s", "--showcharts", type=bool, required=False,
    #     help="enter False to turn off charts, otherwise plotting will occur")
    args = vars(ap.parse_args())
    
    if args["rootdir"] is not None:
        workingDirectory = args["rootdir"]
    
    unique_dirs = get_folder_names(workingDirectory)
    
    make_necessary_dirs(workingDirectory, unique_dirs)